generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  email                    String               @unique
  name                     String
  phone                    String?
  password                 String
  role                     Role                 @default(USER)
  status                   UserStatus           @default(ACTIVE)
  joinDate                 DateTime             @default(now())
  lastLogin                DateTime?
  emailVerified            Boolean              @default(false)
  resetToken               String?
  resetTokenExpiry         DateTime?
  territory                String?
  commission               Decimal?             @db.Decimal(5, 2)
  managerId                String?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  ABTest                   ABTest[]
  account                  account[]
  ads                      Ad[]
  auditLogs                AuditLog[]
  leadCalendarEvents       CalendarEvent[]      @relation("CalendarLead")
  calendarEvents           CalendarEvent[]
  Campaign                 Campaign[]
  channelPartner           ChannelPartner?
  approvedPayouts          CommissionPayout[]   @relation("ApprovedPayouts")
  createdPayouts           CommissionPayout[]   @relation("CreatedPayouts")
  assignedContactInquiries ContactInquiry[]     @relation("ContactInquirySalesManager")
  approvedExpenses         Expense[]            @relation("ApprovedExpenses")
  submittedExpenses        Expense[]            @relation("SubmittedExpenses")
  favorites                Favorite[]
  inquiries                Inquiry[]
  createdInvoices          Invoice[]            @relation("CreatedInvoices")
  customerInvoices         Invoice[]            @relation("CustomerInvoices")
  leadActivities           LeadActivity[]
  assignedLeads            LeadAssignment[]     @relation("SalesManagerToAssignment")
  leadScore                LeadScore?
  MessageAutomation        MessageAutomation[]
  MessageInteraction       MessageInteraction[]
  messageTemplates         MessageTemplate[]
  customerPayments         Payment[]            @relation("CustomerPayments")
  recordedPayments         Payment[]            @relation("RecordedPayments")
  properties               Property[]
  analytics                PropertyAnalytics[]
  createdMessages          RCSMessage[]
  messageRecipients        RCSRecipient[]
  session                  session[]
  SmartSegment             SmartSegment[]
  recordedTransactions     Transaction[]        @relation("RecordedTransactions")
  manager                  User?                @relation("ManagerSubordinate", fields: [managerId], references: [id])
  subordinates             User[]               @relation("ManagerSubordinate")

  @@index([managerId], map: "users_managerId_fkey")
  @@map("users")
}

model ChannelPartner {
  id                  String            @id @default(cuid())
  userId              String            @unique
  companyName         String
  companyRegistration String?
  website             String?
  city                String?
  state               String?
  country             String?           @default("India")
  baseCommission      Decimal           @db.Decimal(5, 2)
  performanceTier     PerformanceTier   @default(BRONZE)
  totalReferrals      Int               @default(0)
  successfulDeals     Int               @default(0)
  totalRevenue        Decimal           @default(0.00) @db.Decimal(15, 2)
  isVerified          Boolean           @default(false)
  verificationDate    DateTime?
  bankAccountName     String?
  bankAccountNumber   String?
  bankIFSC            String?
  panNumber           String?
  gstNumber           String?
  agreementSignedAt   DateTime?
  agreementDocument   String?
  status              PartnerStatus     @default(PENDING)
  notes               String?           @db.Text
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  referrals           PartnerReferral[]

  @@map("channel_partners")
}

model PartnerReferral {
  id               String         @id @default(cuid())
  partnerId        String
  leadName         String
  leadEmail        String
  leadPhone        String
  propertyInterest String?
  budgetRange      String?
  status           ReferralStatus @default(NEW)
  notes            String?        @db.Text
  commissionEarned Decimal?       @db.Decimal(10, 2)
  commissionPaidAt DateTime?
  propertyId       String?
  dealClosedAt     DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  partner          ChannelPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([partnerId], map: "partner_referrals_partnerId_fkey")
  @@map("partner_referrals")
}

model Property {
  id             String              @id @default(cuid())
  title          String
  description    String?             @db.Text
  price          Decimal             @db.Decimal(12, 2)
  location       String
  address        String?
  latitude       Decimal?            @db.Decimal(10, 8)
  longitude      Decimal?            @db.Decimal(11, 8)
  type           PropertyType
  status         PropertyStatus      @default(ACTIVE)
  isFeatured     Boolean             @default(false)
  bedrooms       Int?
  bathrooms      Int?
  area           Decimal?            @db.Decimal(10, 2)
  yearBuilt      Int?
  features       String?             @db.Text
  ownerId        String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  pricePerSqft   Decimal?            @db.Decimal(10, 2)
  kmlFileUrl     String?             @db.Text
  kmlContent     String?             @db.LongText
  plotCount      Int?
  calendarEvents CalendarEvent[]     @relation("CalendarProperty")
  favorites      Favorite[]
  inquiries      Inquiry[]
  invoices       Invoice[]
  leadActivities LeadActivity[]
  owner          User?               @relation(fields: [ownerId], references: [id])
  analytics      PropertyAnalytics[]
  images         PropertyImage[]

  @@index([ownerId], map: "properties_ownerId_fkey")
  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  filename   String
  isPrimary  Boolean  @default(false)
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId], map: "property_images_propertyId_fkey")
  @@map("property_images")
}

model Inquiry {
  id         String        @id @default(cuid())
  name       String
  email      String
  phone      String?
  message    String        @db.Text
  status     InquiryStatus @default(PENDING)
  userId     String?
  propertyId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  property   Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User?         @relation(fields: [userId], references: [id])

  @@index([propertyId], map: "inquiries_propertyId_fkey")
  @@index([userId], map: "inquiries_userId_fkey")
  @@map("inquiries")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([propertyId], map: "favorites_propertyId_fkey")
  @@map("favorites")
}

model PropertyAnalytics {
  id         String         @id @default(cuid())
  event      AnalyticsEvent
  propertyId String
  userId     String?
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime       @default(now())
  property   Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User?          @relation(fields: [userId], references: [id])

  @@index([propertyId], map: "property_analytics_propertyId_fkey")
  @@index([userId], map: "property_analytics_userId_fkey")
  @@map("property_analytics")
}

model ContactInquiry {
  id               String               @id @default(cuid())
  name             String
  email            String
  phone            String?
  subject          String
  message          String               @db.Text
  status           ContactInquiryStatus @default(NEW)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  assignedAt       DateTime?
  notes            String?              @db.Text
  priority         String?              @default("MEDIUM")
  responseDeadline DateTime?
  salesManagerId   String?
  salesManager     User?                @relation("ContactInquirySalesManager", fields: [salesManagerId], references: [id])

  @@index([salesManagerId], map: "contact_inquiries_salesManagerId_fkey")
  @@map("contact_inquiries")
}

model OfficeSettings {
  id                   String   @id @default(cuid())
  companyName          String?
  address              String?
  phone                String?
  email                String?
  website              String?
  logoUrl              String?
  mondayHours          String?
  tuesdayHours         String?
  wednesdayHours       String?
  thursdayHours        String?
  fridayHours          String?
  saturdayHours        String?
  sundayHours          String?
  gtmContainerId       String?
  gtmEnabled           Boolean? @default(false)
  ga4MeasurementId     String?
  ga4Enabled           Boolean? @default(false)
  facebookPixelId      String?
  facebookPixelEnabled Boolean? @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  googleAdsEnabled     Boolean? @default(false)
  googleAdsId          String?

  @@map("office_settings")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  tableName String
  recordId  String?
  oldValues String?  @db.Text
  newValues String?  @db.Text
  userId    String?
  userEmail String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "audit_logs_userId_fkey")
  @@map("audit_logs")
}

model LeadScore {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  score                  Int       @default(0)
  grade                  LeadGrade @default(COLD)
  propertyViews          Int       @default(0)
  inquiriesMade          Int       @default(0)
  contactFormSubmissions Int       @default(0)
  favoritesSaved         Int       @default(0)
  avgSessionDuration     Int?
  returnVisits           Int       @default(0)
  priceRangeSearches     String?   @db.Text
  locationSearches       String?   @db.Text
  propertyTypeInterests  String?   @db.Text
  lastActivity           DateTime?
  daysActive             Int       @default(0)
  budgetEstimate         Decimal?  @db.Decimal(12, 2)
  seriousBuyerIndicator  Boolean   @default(false)
  lastCalculated         DateTime  @default(now())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("lead_scores")
}

model LeadActivity {
  id           String           @id @default(cuid())
  userId       String
  activityType LeadActivityType
  propertyId   String?
  metadata     String?          @db.Text
  score        Int              @default(0)
  createdAt    DateTime         @default(now())
  property     Property?        @relation(fields: [propertyId], references: [id])
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([propertyId], map: "lead_activities_propertyId_fkey")
  @@index([userId], map: "lead_activities_userId_fkey")
  @@map("lead_activities")
}

model LeadAssignment {
  id                String               @id @default(cuid())
  leadId            String
  salesManagerId    String
  assignedAt        DateTime             @default(now())
  status            LeadAssignmentStatus @default(ACTIVE)
  notes             String?              @db.Text
  expectedCloseDate DateTime?
  priority          LeadPriority         @default(MEDIUM)
  lead              lead                 @relation("LeadToAssignment", fields: [leadId], references: [id], onDelete: Cascade)
  salesManager      User                 @relation("SalesManagerToAssignment", fields: [salesManagerId], references: [id], onDelete: Cascade)
  pipelineStages    PipelineStage[]

  @@unique([leadId, salesManagerId])
  @@index([salesManagerId], map: "lead_assignments_salesManagerId_fkey")
  @@map("lead_assignments")
}

model PipelineStage {
  id              String             @id @default(cuid())
  assignmentId    String
  stage           SalesStage
  enteredAt       DateTime           @default(now())
  exitedAt        DateTime?
  durationHours   Int?
  notes           String?            @db.Text
  probability     Int?
  estimatedValue  Decimal?           @db.Decimal(12, 2)
  nextAction      String?
  nextActionDate  DateTime?
  createdBy       String?
  stageActivities PipelineActivity[]
  assignment      LeadAssignment     @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId], map: "pipeline_stages_assignmentId_fkey")
  @@map("pipeline_stages")
}

model PipelineActivity {
  id           String               @id @default(cuid())
  stageId      String
  activityType PipelineActivityType
  description  String               @db.Text
  outcome      String?              @db.Text
  scheduledAt  DateTime?
  completedAt  DateTime?
  createdBy    String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  stage        PipelineStage        @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@index([stageId], map: "pipeline_activities_stageId_fkey")
  @@map("pipeline_activities")
}

model CalendarEvent {
  id             String            @id @default(cuid())
  title          String
  description    String?           @db.Text
  startTime      DateTime
  endTime        DateTime
  eventType      CalendarEventType @default(OTHER)
  status         EventStatus       @default(SCHEDULED)
  salesManagerId String
  leadId         String?
  propertyId     String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  lead           User?             @relation("CalendarLead", fields: [leadId], references: [id])
  property       Property?         @relation("CalendarProperty", fields: [propertyId], references: [id])
  salesManager   User              @relation(fields: [salesManagerId], references: [id], onDelete: Cascade)

  @@index([leadId], map: "calendar_events_leadId_fkey")
  @@index([propertyId], map: "calendar_events_propertyId_fkey")
  @@index([salesManagerId], map: "calendar_events_salesManagerId_fkey")
  @@map("calendar_events")
}

model RCSMessage {
  id                  String                  @id @default(cuid())
  title               String
  content             String                  @db.Text
  richContent         String?                 @db.Text
  messageType         RCSMessageType          @default(TEXT)
  templateId          String?
  scheduledAt         DateTime?
  sentAt              DateTime?
  status              MessageStatus           @default(DRAFT)
  targetAudience      MessageAudience         @default(ALL_USERS)
  createdById         String
  personalizationData String?                 @db.Text
  aiGenerated         Boolean                 @default(false)
  aiPrompt            String?                 @db.Text
  priority            MessagePriority         @default(NORMAL)
  campaignId          String?
  abTestGroup         String?
  abTestVariant       String?
  conversionGoal      String?
  geoTargeting        String?                 @db.Text
  timezone            String?
  expectedCTR         Decimal?                @db.Decimal(5, 2)
  actualCTR           Decimal?                @db.Decimal(5, 2)
  engagementScore     Decimal?                @db.Decimal(5, 2)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  deliveryReports     MessageDeliveryReport[]
  interactions        MessageInteraction[]
  abTest              ABTest?                 @relation(fields: [abTestGroup], references: [id])
  campaign            Campaign?               @relation(fields: [campaignId], references: [id])
  createdBy           User                    @relation(fields: [createdById], references: [id])
  recipients          RCSRecipient[]

  @@index([abTestGroup], map: "rcs_messages_abTestGroup_fkey")
  @@index([campaignId], map: "rcs_messages_campaignId_fkey")
  @@index([createdById], map: "rcs_messages_createdById_fkey")
  @@map("rcs_messages")
}

model RCSRecipient {
  id           String          @id @default(cuid())
  messageId    String
  userId       String
  status       RecipientStatus @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  readAt       DateTime?
  clickedAt    DateTime?
  errorMessage String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  message      RCSMessage      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId], map: "rcs_recipients_userId_fkey")
  @@map("rcs_recipients")
}

model MessageTemplate {
  id          String           @id @default(cuid())
  name        String
  description String?
  content     String           @db.Text
  richContent String?          @db.Text
  messageType RCSMessageType   @default(TEXT)
  category    TemplateCategory @default(GENERAL)
  isActive    Boolean          @default(true)
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   User             @relation(fields: [createdById], references: [id])

  @@index([createdById], map: "message_templates_createdById_fkey")
  @@map("message_templates")
}

model MessageDeliveryReport {
  id             String     @id @default(cuid())
  messageId      String
  totalSent      Int        @default(0)
  totalDelivered Int        @default(0)
  totalRead      Int        @default(0)
  totalClicked   Int        @default(0)
  totalFailed    Int        @default(0)
  deliveryRate   Decimal    @default(0.00) @db.Decimal(5, 2)
  openRate       Decimal    @default(0.00) @db.Decimal(5, 2)
  clickRate      Decimal    @default(0.00) @db.Decimal(5, 2)
  generatedAt    DateTime   @default(now())
  message        RCSMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId], map: "message_delivery_reports_messageId_fkey")
  @@map("message_delivery_reports")
}

model Campaign {
  id            String         @id @default(cuid())
  name          String
  description   String?        @db.Text
  startDate     DateTime
  endDate       DateTime?
  status        CampaignStatus @default(ACTIVE)
  budget        Decimal?       @db.Decimal(10, 2)
  targetMetrics String?        @db.Text
  createdById   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  abTests       ABTest[]
  createdBy     User           @relation(fields: [createdById], references: [id])
  messages      RCSMessage[]

  @@index([createdById], map: "campaigns_createdById_fkey")
  @@map("campaigns")
}

model ABTest {
  id              String       @id @default(cuid())
  name            String
  description     String?      @db.Text
  variants        String       @db.Text
  trafficSplit    String       @db.Text
  startDate       DateTime
  endDate         DateTime?
  status          ABTestStatus @default(RUNNING)
  winnerVariant   String?
  confidenceLevel Decimal?     @db.Decimal(5, 2)
  createdById     String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  campaignId      String?
  campaign        Campaign?    @relation(fields: [campaignId], references: [id])
  createdBy       User         @relation(fields: [createdById], references: [id])
  messages        RCSMessage[]

  @@index([campaignId], map: "ab_tests_campaignId_fkey")
  @@index([createdById], map: "ab_tests_createdById_fkey")
  @@map("ab_tests")
}

model MessageInteraction {
  id              String          @id @default(cuid())
  messageId       String
  userId          String
  interactionType InteractionType
  data            String?         @db.Text
  timestamp       DateTime        @default(now())
  deviceInfo      String?         @db.Text
  location        String?
  message         RCSMessage      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([messageId], map: "message_interactions_messageId_fkey")
  @@index([userId], map: "message_interactions_userId_fkey")
  @@map("message_interactions")
}

model SmartSegment {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  criteria        String    @db.Text
  estimatedSize   Int?
  actualSize      Int?
  refreshSchedule String?
  lastRefreshed   DateTime?
  createdById     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       User      @relation(fields: [createdById], references: [id])

  @@index([createdById], map: "smart_segments_createdById_fkey")
  @@map("smart_segments")
}

model MessageAutomation {
  id              String            @id @default(cuid())
  name            String
  description     String?           @db.Text
  trigger         AutomationTrigger
  triggerData     String            @db.Text
  messageTemplate String            @db.Text
  conditions      String?           @db.Text
  isActive        Boolean           @default(true)
  executionCount  Int               @default(0)
  lastExecuted    DateTime?
  createdById     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       User              @relation(fields: [createdById], references: [id])

  @@index([createdById], map: "message_automations_createdById_fkey")
  @@map("message_automations")
}

model Ad {
  id              String    @id @default(cuid())
  title           String
  subtitle        String?
  description     String    @db.Text
  imageUrl        String?
  ctaText         String
  ctaLink         String
  backgroundColor String?
  textColor       String?
  type            AdType    @default(CARD)
  isActive        Boolean   @default(true)
  displayOrder    Int       @default(0)
  startDate       DateTime?
  endDate         DateTime?
  clickCount      Int       @default(0)
  impressionCount Int       @default(0)
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  creator         User      @relation(fields: [createdBy], references: [id])

  @@index([type, isActive, displayOrder])
  @@index([startDate, endDate])
  @@index([createdBy], map: "ads_createdBy_fkey")
  @@map("ads")
}

model MemorableMoment {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  imageUrl      String
  date          String
  category      String
  displayOrder  Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  imageData     Bytes?
  imageMimeType String?
  imageSize     Int?

  @@index([displayOrder, isActive])
  @@map("memorable_moments")
}

model MemorableMomentsSection {
  id          String   @id @default(cuid())
  title       String
  subtitle    String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("memorable_moments_section")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model lead {
  id                     String           @id
  name                   String
  email                  String
  phone                  String?
  status                 String           @default("NEW")
  source                 String           @default("Excel Upload")
  createdAt              DateTime         @default(now())
  updatedAt              DateTime
  avgSessionDuration     Int?
  budgetEstimate         Decimal?         @db.Decimal(12, 2)
  contactFormSubmissions Int              @default(0)
  daysActive             Int              @default(0)
  favoritesSaved         Int              @default(0)
  grade                  lead_grade       @default(COLD)
  inquiriesMade          Int              @default(0)
  lastActivity           DateTime?
  lastCalculated         DateTime         @default(now())
  locationSearches       String?          @db.Text
  priceRangeSearches     String?          @db.Text
  propertyTypeInterests  String?          @db.Text
  propertyViews          Int              @default(0)
  returnVisits           Int              @default(0)
  score                  Int              @default(0)
  seriousBuyerIndicator  Boolean          @default(false)
  leadAssignments        LeadAssignment[] @relation("LeadToAssignment")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  customerId      String?
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerAddress String?       @db.Text
  propertyId      String?
  propertyTitle   String?
  description     String?       @db.Text
  subtotal        Decimal       @db.Decimal(12, 2)
  taxRate         Decimal       @default(0.00) @db.Decimal(5, 2)
  taxAmount       Decimal       @default(0.00) @db.Decimal(12, 2)
  discount        Decimal       @default(0.00) @db.Decimal(12, 2)
  totalAmount     Decimal       @db.Decimal(12, 2)
  status          InvoiceStatus @default(DRAFT)
  issueDate       DateTime      @default(now())
  dueDate         DateTime?
  paidDate        DateTime?
  notes           String?       @db.Text
  terms           String?       @db.Text
  createdById     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       User          @relation("CreatedInvoices", fields: [createdById], references: [id])
  customer        User?         @relation("CustomerInvoices", fields: [customerId], references: [id])
  property        Property?     @relation(fields: [propertyId], references: [id])
  payments        Payment[]

  @@index([customerId])
  @@index([propertyId])
  @@index([createdById])
  @@index([status])
  @@index([issueDate])
  @@map("invoices")
}

model Payment {
  id              String        @id @default(cuid())
  paymentNumber   String        @unique
  amount          Decimal       @db.Decimal(12, 2)
  paymentMethod   PaymentMethod
  paymentMode     PaymentMode   @default(ONLINE)
  referenceNumber String?
  bankName        String?
  invoiceId       String?
  customerId      String?
  customerName    String?
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime      @default(now())
  clearedDate     DateTime?
  notes           String?       @db.Text
  receiptUrl      String?
  recordedById    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  customer        User?         @relation("CustomerPayments", fields: [customerId], references: [id])
  invoice         Invoice?      @relation(fields: [invoiceId], references: [id])
  recordedBy      User          @relation("RecordedPayments", fields: [recordedById], references: [id])

  @@index([invoiceId])
  @@index([customerId])
  @@index([recordedById])
  @@index([status])
  @@index([paymentDate])
  @@map("payments")
}

model CommissionPayout {
  id                String              @id @default(cuid())
  payoutNumber      String              @unique
  recipientType     CommissionRecipient
  recipientId       String
  recipientName     String
  amount            Decimal             @db.Decimal(10, 2)
  taxDeducted       Decimal             @default(0.00) @db.Decimal(10, 2)
  netAmount         Decimal             @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  referenceNumber   String?
  bankAccountNumber String?
  bankIFSC          String?
  periodStart       DateTime
  periodEnd         DateTime
  referralIds       String?             @db.Text
  dealIds           String?             @db.Text
  status            PayoutStatus        @default(PENDING)
  approvedAt        DateTime?
  approvedById      String?
  paidAt            DateTime?
  notes             String?             @db.Text
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  approvedBy        User?               @relation("ApprovedPayouts", fields: [approvedById], references: [id])
  createdBy         User                @relation("CreatedPayouts", fields: [createdById], references: [id])

  @@index([recipientType])
  @@index([recipientId])
  @@index([status])
  @@index([periodStart, periodEnd])
  @@index([approvedById])
  @@index([createdById])
  @@map("commission_payouts")
}

model Transaction {
  id                String              @id @default(cuid())
  transactionNumber String              @unique
  type              TransactionType
  category          TransactionCategory
  amount            Decimal             @db.Decimal(12, 2)
  title             String
  description       String?             @db.Text
  referenceType     String?
  referenceId       String?
  debitAccount      String?
  creditAccount     String?
  status            TransactionStatus   @default(COMPLETED)
  transactionDate   DateTime            @default(now())
  tags              String?             @db.Text
  attachments       String?             @db.Text
  recordedById      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  recordedBy        User                @relation("RecordedTransactions", fields: [recordedById], references: [id])

  @@index([type])
  @@index([category])
  @@index([status])
  @@index([transactionDate])
  @@index([recordedById])
  @@map("transactions")
}

model Expense {
  id              String          @id @default(cuid())
  expenseNumber   String          @unique
  category        ExpenseCategory
  subcategory     String?
  amount          Decimal         @db.Decimal(12, 2)
  title           String
  description     String?         @db.Text
  vendor          String?
  taxRate         Decimal         @default(0.00) @db.Decimal(5, 2)
  taxAmount       Decimal         @default(0.00) @db.Decimal(12, 2)
  paymentMethod   PaymentMethod?
  referenceNumber String?
  status          ExpenseStatus   @default(PENDING)
  expenseDate     DateTime        @default(now())
  approvedAt      DateTime?
  paidAt          DateTime?
  approvedById    String?
  receiptUrl      String?
  notes           String?         @db.Text
  submittedById   String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  approvedBy      User?           @relation("ApprovedExpenses", fields: [approvedById], references: [id])
  submittedBy     User            @relation("SubmittedExpenses", fields: [submittedById], references: [id])

  @@index([category])
  @@index([status])
  @@index([expenseDate])
  @@index([approvedById])
  @@index([submittedById])
  @@map("expenses")
}

enum Role {
  USER
  ADMIN
  SALES_MANAGER
  CHANNEL_PARTNER
  ACCOUNTS
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PropertyType {
  AGRICULTURAL_LAND
  NA_LAND
}

enum PropertyStatus {
  ACTIVE
  SOLD
  PENDING
  INACTIVE
}

enum InquiryStatus {
  PENDING
  RESPONDED
  CLOSED
}

enum AnalyticsEvent {
  VIEW
  CONTACT
  FAVORITE
  SHARE
}

enum ContactInquiryStatus {
  NEW
  REVIEWED
  RESPONDED
  CLOSED
}

enum LeadGrade {
  COLD
  WARM
  HOT
  QUALIFIED
}

enum LeadActivityType {
  PROPERTY_VIEW
  PROPERTY_INQUIRY
  CONTACT_FORM
  FAVORITE_ADDED
  SEARCH_PERFORMED
  RETURN_VISIT
  PHONE_CALL_MADE
  EMAIL_OPENED
  BROCHURE_DOWNLOADED
}

enum LeadAssignmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum LeadPriority {
  LOW
  MEDIUM
  NORMAL
  HIGH
  URGENT
}

enum SalesStage {
  NEW_LEAD
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATION
  PROPERTY_VIEWING
  APPLICATION
  CLOSING
  WON
  LOST
  ON_HOLD
}

enum PipelineActivityType {
  PHONE_CALL
  EMAIL_SENT
  EMAIL_RECEIVED
  MEETING_SCHEDULED
  MEETING_COMPLETED
  PROPERTY_SHOWING
  PROPOSAL_SENT
  FOLLOW_UP
  DOCUMENT_RECEIVED
  APPLICATION_SUBMITTED
  NEGOTIATION
  CONTRACT_SENT
  CONTRACT_SIGNED
  PAYMENT_RECEIVED
  DEAL_CLOSED
  DEAL_LOST
  NOTE_ADDED
}

enum CalendarEventType {
  MEETING
  PROPERTY_VIEWING
  FOLLOW_UP
  CALL
  OTHER
}

enum EventStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum RCSMessageType {
  TEXT
  RICH_TEXT
  IMAGE
  VIDEO
  CARD
  CAROUSEL
  QUICK_REPLY
  SUGGESTION
}

enum MessageStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
  CANCELLED
}

enum MessageAudience {
  ALL_USERS
  LEADS_ONLY
  SALES_MANAGERS
  CUSTOM_LIST
  PROPERTY_INQUIRERS
  ACTIVE_USERS
}

enum RecipientStatus {
  PENDING
  SENT
  DELIVERED
  READ
  CLICKED
  FAILED
  BOUNCED
}

enum TemplateCategory {
  GENERAL
  MARKETING
  NOTIFICATION
  WELCOME
  PROPERTY_UPDATE
  APPOINTMENT
  FOLLOW_UP
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum InteractionType {
  DELIVERED
  OPENED
  CLICKED
  REPLIED
  SHARED
  SAVED
  DISMISSED
  BLOCKED
  CONVERTED
}

enum AutomationTrigger {
  USER_SIGNUP
  PROPERTY_VIEW
  INQUIRY_SUBMITTED
  LEAD_SCORE_CHANGE
  APPOINTMENT_SCHEDULED
  DEAL_CLOSED
  INACTIVITY_DETECTED
  BIRTHDAY
  ANNIVERSARY
  CUSTOM_EVENT
}

enum AdType {
  BANNER
  CARD
  FEATURED
}

enum lead_grade {
  COLD
  WARM
  HOT
  QUALIFIED
}

enum PerformanceTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum PartnerStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum ReferralStatus {
  NEW
  CONTACTED
  QUALIFIED
  SITE_VISIT_SCHEDULED
  SITE_VISIT_COMPLETED
  NEGOTIATION
  DEAL_WON
  DEAL_LOST
  ON_HOLD
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  SENT
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
  UPI
  CARD
  NET_BANKING
  OTHER
}

enum PaymentMode {
  ONLINE
  OFFLINE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum CommissionRecipient {
  CHANNEL_PARTNER
  SALES_MANAGER
}

enum PayoutStatus {
  PENDING
  APPROVED
  PROCESSING
  PAID
  REJECTED
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionCategory {
  PROPERTY_SALE
  COMMISSION_PAYMENT
  VENDOR_PAYMENT
  SALARY
  MARKETING
  OPERATIONAL
  OTHER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum ExpenseCategory {
  MARKETING
  OPERATIONAL
  SALARY
  UTILITIES
  RENT
  MAINTENANCE
  LEGAL
  TRAVEL
  OFFICE_SUPPLIES
  SOFTWARE
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
  CANCELLED
}
